// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Popup {
    id          String         @id @default(cuid())
    name        String
    description String
    basedIn     String
    imageUrl    String?
    facebook    String?
    instagram   String?
    twitter     String?
    website     String?
    youtube     String?
    tags        TagsOnPopups[]
    isHot       Boolean
    orderType   String
    events      Event[]
}

model Event {
    id          String   @id @default(cuid())
    popupId     String
    locationId  String
    name        String?
    description String?
    date        DateTime
    location    Location @relation(fields: [locationId], references: [id])
    popup       Popup    @relation(fields: [popupId], references: [id])
}

model Location {
    id      String  @id @default(cuid())
    name    String
    address String
    city    String
    state   String
    zip     String
    country String
    mapsUrl String
    events  Event[]
}

model Tags {
    id     String         @id @default(cuid())
    name   String
    popups TagsOnPopups[]
}

model TagsOnPopups {
    id      String @id @default(cuid())
    popup   Popup  @relation(fields: [popupId], references: [id])
    popupId String
    tag     Tags   @relation(fields: [tagId], references: [id])
    tagId   String
}
